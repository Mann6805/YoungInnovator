// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  items         Item[]      @relation("UploaderItems")
  swaps         Swap[]      @relation("RequesterSwaps")
  userBadges    UserBadge[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Gender {
  Men
  Women
  Kids
}

enum ItemType {
  Top
  Bottom
  Outerwear
  Accessory
}

enum ItemCondition {
  New
  Like_New
  Used
  Well_Worn
}

enum ItemStatus {
  available
  in_swap
  swapped
}

enum SwapStatus {
  pending
  accepted
  completed
  rejected
  cancelled
}

model Item {
  item_id         String        @id @default(uuid())
  uploader_id     String
  title           String
  description     String
  gender          Gender
  category        String
  type            ItemType
  size            String
  condition       ItemCondition
  tags            String[]      @default([])
  images          String[]      @default([])
  status          ItemStatus    @default(available)
  current_swap_id String?       @unique
  created_at      DateTime      @default(now())

  uploader        User   @relation("UploaderItems", fields: [uploader_id], references: [id])
  currentSwap     Swap?  @relation("CurrentSwap", fields: [current_swap_id], references: [swap_id])
  requestedInSwap Swap[] @relation("RequestedItem")
  offeredInSwap   Swap[] @relation("OfferedItem")
}

model Swap {
  swap_id           String     @id @default(uuid())
  item_requested_id String
  requester_id      String
  offered_item_id   String?
  points_offered    Int?
  status            SwapStatus
  created_at        DateTime   @default(now())
  completed_at      DateTime?

  itemRequested Item  @relation("RequestedItem", fields: [item_requested_id], references: [item_id])
  requester     User  @relation("RequesterSwaps", fields: [requester_id], references: [id])
  offeredItem   Item? @relation("OfferedItem", fields: [offered_item_id], references: [item_id])
  currentItem   Item? @relation("CurrentSwap")
}

model Badge {
  badge_id     String @id @default(uuid())
  name         String
  description  String
  icon_url     String
  points_bonus Int    @default(0)

  userBadges UserBadge[]
}

model UserBadge {
  user_badge_id String   @id @default(uuid())
  user_id       String
  badge_id      String
  awarded_at    DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
  badge Badge @relation(fields: [badge_id], references: [badge_id])
}
